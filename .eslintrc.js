module.exports = {
    env: {
        es2020: true,
        node: true,
        jest: true,
    },
    globals: {
        Atomics: 'readonly',
        SharedArrayBuffer: 'readonly',
    },
    extends: [
        'standard',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:jest/recommended',
        'plugin:jest/style',
        'plugin:promise/recommended',
        'prettier/@typescript-eslint',
    ],
    plugins: [
        '@typescript-eslint/eslint-plugin',
        'jest',
        'promise',
        'prettier',
        'eslint-plugin-import-helpers',
    ],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 12,
        project: 'tsconfig.eslint.json',
        sourceType: 'module',
    },
    rules: {
        semi: ['error', 'always'],
        'jest/no-disabled-tests': 'warn',
        'jest/no-focused-tests': 'error',
        'jest/no-identical-title': 'error',
        'jest/prefer-to-have-length': 'warn',
        'jest/valid-expect': 'error',
        '@typescript-eslint/explicit-function-return-type': 'warn',
        '@typescript-eslint/no-explicit-any': 'warn',
        '@typescript-eslint/await-thenable': 'warn',
        '@typescript-eslint/ban-ts-comment': 'error',
        '@typescript-eslint/ban-types': 'warn',
        'brace-style': 'off',
        '@typescript-eslint/brace-style': [
            'error',
            '1tbs', {
                allowSingleLine: true,
            },
        ],
        'comma-spacing': 'off',
        '@typescript-eslint/comma-spacing': [
            'error', {
                before: false,
                after: true,
            },
        ],
        'comma-dangle': 'off',
        '@typescript-eslint/comma-dangle': [
            'error',
            {
                arrays: 'always-multiline',
                objects: 'always-multiline',
                imports: 'always-multiline',
                exports: 'always-multiline',
                functions: 'always-multiline',
                enums: 'always-multiline',
                generics: 'always-multiline',
                tuples: 'always-multiline',
            },
        ],
        '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
        'default-param-last': 'off',
        '@typescript-eslint/default-param-last': ['error'],
        'dot-notation': 'off',
        '@typescript-eslint/dot-notation': [
            'error',
            {
                allowPattern: '^[a-z]+(_[a-z]+)+$',
                allowKeywords: true,
                allowPrivateClassPropertyAccess: true,
            },
        ],
        indent: 'off',
        '@typescript-eslint/indent': [
            'warn',
            2,
            {
                VariableDeclarator: { let: 2, const: 2 },
                MemberExpression: 1,
                FunctionDeclaration: { body: 1, parameters: 2 },
                FunctionExpression: { body: 1, parameters: 2 },
                ArrayExpression: 1,
                ObjectExpression: 1,
                ImportDeclaration: 1,
                offsetTernaryExpressions: false,
            },
        ],
        'init-declarations': 'off',
        '@typescript-eslint/init-declarations': ['warn', 'always'],
        'keyword-spacing': 'off',
        '@typescript-eslint/keyword-spacing': [
            'error',
            {
                before: true,
                after: true,
            },
        ],
        'lines-between-class-members': 'off',
        '@typescript-eslint/lines-between-class-members': [
            'error',
            'always',
            {
                exceptAfterOverload: true,
                exceptAfterSingleLine: true,
            },
        ],
        '@typescript-eslint/member-delimiter-style': ['error'],
        'camelcase': 'warn',
        'no-useless-call': 'warn',
        '@typescript-eslint/naming-convention': [
            'warn',
            {
                selector: 'interface',
                format: ['PascalCase'],
                custom: {
                    regex: '^I[A-Z]',
                    match: true,
                },
            },
            {
                selector: 'class',
                format: ['PascalCase'],
            },
            {
                selector: 'enum',
                format: ['PascalCase'],
            },
        ],
        'no-empty-function': 'off',
        '@typescript-eslint/no-empty-function': ['error'],
        'no-extra-semi': 'off',
        '@typescript-eslint/no-extra-semi': ['error'],
        '@typescript-eslint/no-for-in-array': ['error'],
        'no-invalid-this': 'off',
        '@typescript-eslint/no-invalid-this': ['error'],
        'no-magic-numbers': 'off',
        '@typescript-eslint/no-magic-numbers': [
            'warn',
            {
                ignoreEnums: true,
                ignoreNumericLiteralTypes: true,
                ignoreReadonlyClassProperties: true,
            },
        ],
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-namespace': 'error',
        '@typescript-eslint/no-require-imports': 'warn',
        '@typescript-eslint/no-throw-literal': 'warn',
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'warn',
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars-experimental': 'warn',
        '@typescript-eslint/prefer-for-of': ['warn'],
        '@typescript-eslint/prefer-optional-chain': ['warn'],
        quotes: 'off',
        '@typescript-eslint/quotes': ['error', 'single'],
        '@typescript-eslint/type-annotation-spacing': [
            'error',
            {
                after: true,
            },
        ],
        '@typescript-eslint/explicit-module-boundary-types': ['warn'],
        'space-before-function-paren': [
            'error', {
                anonymous: 'always',
                named: 'never',
                asyncArrow: 'always',
            },
        ],
        'no-await-in-loop': 'warn',
        'class-methods-use-this': 'off',
        'no-param-reassign': 'off',
        'no-cond-assign': 'error',
        'no-prototype-builtins': 'off',
        'no-constant-condition': 'warn',
        'no-restricted-syntax': 'off',
        'max-classes-per-file': 'off',
        'no-console': 'warn',
        'no-useless-constructor': 'off',
        'no-underscore-dangle': 'off',
        'max-len': [
            'warn',
            {
                code: 80,
                ignoreUrls: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
                ignoreRegExpLiterals: true,
            },
        ],
        'no-unexpected-multiline': 'warn',
        'import/prefer-default-export': 'off',
        'import-helpers/order-imports': [
            'warn',
            {
                newlinesBetween: 'always', // new line between groups
                groups: [
                    'module',
                    '/^@server/shared/',
                    '/^@/', ['parent', 'sibling', 'index'],
                ],
                alphabetize: {
                    order: 'asc',
                    ignoreCase: true,
                },
            },
        ],
    },
};